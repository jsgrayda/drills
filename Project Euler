#1
Eu_1 = 0
for i in range(1, 1000):
    if i % 3 == 0 or i % 5 == 0:
        Eu_1 += i
        
print (Eu_1)


#2
fibNumbers = [1,2]
while fibNumbers[-1] < 4000000:
    fibNumbers.append(fibNumbers[-1] + fibNumbers[-2])
del fibNumbers[-1]

evenfibNumbers = []
for num in fibNumbers:
    if num % 2 == 0:
        evenfibNumbers.append(num)
        
print(sum(evenfibNumbers))

#3
def getFactors(number):
    factors = []
    for potentialfactor in range(1, number + 1):
        if number % potentialfactor == 0:
            factors.append(potentialfactor)
    return factors

def isPrime(number): # here you are checking if the number you put in is prime
    return len(getFactors(number)) == 2 #bc a prime number would only have 2 factors

allFactors = getFactors(600851475143)

largestPrimeFactor = 0
for factor in allFactors:
    if isPrime(factor) and factor > largestPrimeFactor:
        largestPrimeFactor = factor

print(largestPrimeFactor)

#4
def is_palindrome (i):
    return str(i) == str(i)[::1]

max_p = 0
for i in range(100, 999):
    for j in range(i+1, 1000):
        p = i * j
        if is_palindrome(p) and p > max_p:
            max_p = p
print (max_p)

#5
def isDivisible1to20(number):
    for i in range(1,21):
        if number % i != 0:
            return False
    return True

number = 1
while True:
    if isDivisible1to20(number):
        break
    else:
        number +=1
        
print(number)

#6
sumOfSquares = 0
for i in range (1,101):
    sumOfSquares += i * i
    
squareOfSums = 0
for i in range(1, 101):
    squareOfSums += i
squareOfSums = squareOfSums * squareOfSums

print (squareOfSums - sumOfSquares)

#7
from math import ceil

def is_prime(num):
    top = int(ceil(num ** 0.5))
    for x in range (3, top + 1, 2):
        if num % x == 0:
            return False    
    return True

def primes(max=10):
    yield 2
    found = 1
    current = 3
    while found < max:
        if is_prime(current):
            yield current
            found += 1
        current += 2

for prime in primes (10001):
    print (prime) #prints list
    
#8 
def main():
    number = str(7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450)
    largest_so_far = 0
    current = 1
    how_many_digits = 13
    for i in range(len(number) - how_many_digits):
        for j in range(how_many_digits):
            current *= int(number [i+j])
        if current > largest_so_far:
            largest_so_far = current
        current = 1
    print (largest_so_far)
main()
       
#9
def main():
    sum_total = 1000
    
    for c in range(sum_total):
        for b in range(c):
            for a in range(b):
                if a+b+c == sum_total:
                    if is_triplet (a,b,c):
                        print (a,b,c)
                        print (a*b*c)
                
    
    print (is_triplet(a,b,b))
    
def is_triplet (a,b,c):
    if a**2 + b**2 == c**2:
        
        return (True)
    else:
        return (False)
    
main()


#10
import time

def main():
    start_time =time.time()
    number_prime_to_find_up_to = 2000000
    x=3
    list_of_primes = []
    
    list_of_primes_to_check = []
    index = 0
    
    while (list_of_primes[-1] < number_prime_to_find_up_to):
        if all(x % prime for prime in list_of_primes_to_check):
            list_of_primes.append(x)
            if list_of_primes[index] < x**0.5 + 1:
                list_of_primes_to_check.append(list_of_primes[index])
                index ** 1
        x += 1
    list_of_primes.pop(-1)
    print(sum(list_of_primes))
        
