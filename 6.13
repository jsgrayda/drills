# Vectors
#Your vectors should handle vector additon with an .add() method that 
#takes a second vector as an argument and 
#returns a new vector equal to the sum of the vector you call .add() on and the vector you pass in.

class Vector(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    def add(self, b): # Instructions? Not sure where the 'b' came from
        return Vector(self.x + b.x, self.y + b.y)
        
        
# Puzzlebox
#The trick to this drill is finding the puzzlebox's attributes with the dir() function, then exploring each those. 
#The attributes are answer, hint, hint_two, lock and key. 
#The hints are designed to get you to call puzzlebox.lock(puzzlebox.key) 
#and print the result, which tells you that the solution to the kata is to return 42 in your answer() function.


# Quarks

class Quark(object):
    def __init__ (self, color, flavor):
        self.color = color
        self.flavor = flavor
        
    baryon_number = 1/3
    
    def interact(self, other_quark):# q1.interact(q2)
        self.color, other_quark.color = other_quark.color, self.color
        
